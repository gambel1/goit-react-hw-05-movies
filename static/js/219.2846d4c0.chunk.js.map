{"version":3,"file":"static/js/219.2846d4c0.chunk.js","mappings":"mOAEaA,EAAcC,EAAAA,EAAAA,GAAH,oGAOXC,EAAcD,EAAAA,EAAAA,GAAH,yCAIXE,EAAkBF,EAAAA,EAAAA,EAAH,mE,gDCLb,SAASG,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBN,GAASO,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACzBC,EAAY,GAElBD,EAAKE,KAAI,YAAiC,IAClCC,EAAQ,CACZC,GAFqC,EAA7BA,GAGRC,KAHqC,EAAzBA,KAIZC,MAJqC,EAAnBC,cAOpB,OAAON,EAAUO,KAAKL,MAGxBP,EAAUK,QAEX,CAACT,IAGFG,IACE,0BACE,SAACR,EAAD,UACGQ,EAAOO,KAAI,YAA0B,IAAvBE,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACvB,OACE,UAACjB,EAAD,YACE,0BACE,gBAAKoB,IAAG,UAhCP,oCAgCO,OAAkBH,GAASI,IAAKL,OAE1C,SAACf,EAAD,UAAkBe,MAJFD,UAchCb,EAAKoB,UAAY,CACfhB,OAAQiB,IAAAA,QACNA,IAAAA,MAAgB,CACdR,GAAIQ,IAAAA,OACJP,KAAMO,IAAAA,OACNN,MAAOM,IAAAA,UAETC","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorListUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  margin-bottom: 80px;\n`;\n\nexport const ActorListLi = styled.li`\n  width: 270px;\n`;\n\nexport const ActorListTitleP = styled.p`\n  text-align: center;\n  margin-top: 5px;\n`;\n","import { fetchMoviesCast } from '../../api/fetchApi';\nimport { ActorListUl, ActorListLi, ActorListTitleP } from './Cast.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport propTypes from 'prop-types';\n\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n\n  useEffect(() => {\n    fetchMoviesCast(movieId).then(({ cast }) => {\n      const actorsArr = [];\n\n      cast.map(({ id, name, profile_path }) => {\n        const actor = {\n          id,\n          name,\n          photo: profile_path,\n        };\n\n        return actorsArr.push(actor);\n      });\n\n      setActors(actorsArr);\n    });\n  }, [movieId]);\n\n  return (\n    actors && (\n      <div>\n        <ActorListUl>\n          {actors.map(({ id, name, photo }) => {\n            return (\n              <ActorListLi key={id}>\n                <div>\n                  <img src={`${imgBaseUrl}${photo}`} alt={name} />\n                </div>\n                <ActorListTitleP>{name}</ActorListTitleP>\n              </ActorListLi>\n            );\n          })}\n        </ActorListUl>\n      </div>\n    )\n  );\n}\n\nCast.prototype = {\n  actors: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      name: propTypes.string,\n      photo: propTypes.string,\n    }),\n  ).isRequired,\n};\n"],"names":["ActorListUl","styled","ActorListLi","ActorListTitleP","Cast","movieId","useParams","useState","actors","setActors","useEffect","fetchMoviesCast","then","cast","actorsArr","map","actor","id","name","photo","profile_path","push","src","alt","prototype","propTypes","isRequired"],"sourceRoot":""}